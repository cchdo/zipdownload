{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["View","props","state","content","fetch","then","res","text","setState","this","Component","App","progress","zipfile","JSZip","file","map","path","split","blob","generateAsync","type","meta","percent","saveAs","className","onClick","download","max","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"iOAKMA,E,YACJ,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,QAAS,iBAHK,E,iFAOE,IAAD,OACjBC,MACE,2DACAC,MACA,SAACC,GAAD,OAASA,EAAIC,UACbF,MACA,SAACE,GAAD,OAAU,EAAKC,SAAS,CAACL,QAASI,S,+BAKpC,OACE,6BACGE,KAAKP,MAAMC,a,GArBDO,aAkEJC,E,YAtCb,WAAYV,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXU,SAAU,GAHI,E,wEAON,IAAD,OAULC,EAAU,IAAIC,IAElBD,EAAQE,KAAK,eAAgB,iEAXlB,CACT,yDACA,4DACA,uDACA,yDACA,4DACA,0DACA,2DAMGC,KAAI,SAACC,GACR,OAAOJ,EAAQE,KAAK,QAAUE,EAAKC,MAAM,KAAK,GAAId,MAAMa,GAAMZ,MAAK,SAACC,GAAD,OAASA,EAAIa,cAElFN,EAAQO,cAAc,CAACC,KAAK,SAAS,SAACC,GAAD,OAAU,EAAKd,SAAS,CAACI,SAASU,EAAKC,aAAWlB,MAAK,SAACc,GAAD,OAAUK,iBAAOL,EAAM,iC,+BAE3G,IAAD,OACP,OACE,yBAAKM,UAAU,OACb,4BAAQC,QAAS,kBAAM,EAAKC,aAA5B,uBACA,6BACA,8BAAUC,IAAI,MAAMC,MAAOpB,KAAKP,MAAMU,WACtC,kBAAC,EAAD,W,GAjCUF,aCtBZoB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACThC,MAAK,SAAAoC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzC,QACfoC,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MCxEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDalC,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,IAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMmB,IAAN,sBAEP1B,IAiDV,SAAiCO,GAE/BjC,MAAMiC,GACHhC,MAAK,SAAAsD,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CzB,UAAUC,cAAcyB,MAAM3D,MAAK,SAAAoC,GACjCA,EAAawB,aAAa5D,MAAK,WAC7B2B,OAAOC,SAASiC,eAKpB9B,EAAgBC,MAGnBY,OAAM,WACLF,QAAQC,IACN,oEArEAmB,CAAwB9B,GAIxBC,UAAUC,cAAcyB,MAAM3D,MAAK,WACjC0C,QAAQC,IACN,gHAMJZ,EAAgBC,OCxCxB+B,I","file":"static/js/main.09be812f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport JSZip from 'jszip';\nimport { saveAs } from 'file-saver';\n\nclass View extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      content: \"Hi from stuff\"\n    }\n  }\n\n  componentDidMount(){\n    fetch(\n      \"https://cchdo.ucsd.edu/data/7024/p06_318M20091121su.txt\"\n    ).then(\n      (res) => res.text()\n    ).then(\n      (text) => this.setState({content: text})\n    )\n  }\n\n  render() {\n    return (\n      <pre>\n        {this.state.content}\n      </pre>\n    )\n  }\n}\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      progress: 0\n    }\n  }\n\n  download() {\n    let data = [\n      \"https://cchdo.ucsd.edu/data/12130/318M20091121_hy1.csv\",\n      \"https://cchdo.ucsd.edu/data/12131/318M20091121_nc_hyd.zip\",\n      \"https://cchdo.ucsd.edu/data/12132/318M20091121hy.txt\",\n      \"https://cchdo.ucsd.edu/data/13792/318M20091121_ct1.zip\",\n      \"https://cchdo.ucsd.edu/data/13793/318M20091121_nc_ctd.zip\",\n      \"https://cchdo.ucsd.edu/data/3102/p06_318M20091121do.txt\",\n      \"https://cchdo.ucsd.edu/data/7024/p06_318M20091121su.txt\",\n    ];\n    let zipfile = new JSZip();\n\n    zipfile.file(\"citation.txt\", \"Please cite these data as follows: Data from P06 318M20091121\")\n\n    data.map((path) => {\n      return zipfile.file(\"data/\" + path.split(\"/\")[5], fetch(path).then((res) => res.blob()));\n    })\n    zipfile.generateAsync({type:\"blob\"}, (meta) => this.setState({progress:meta.percent})).then((blob) => saveAs(blob, \"p6_bottle_data_part1.zip\"))\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <button onClick={() => this.download()}>Download some data!</button>\n        <br />\n        <progress max=\"100\" value={this.state.progress}></progress>\n        <View />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}